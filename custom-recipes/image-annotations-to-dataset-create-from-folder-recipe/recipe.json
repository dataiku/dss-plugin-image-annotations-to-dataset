// This file is the descriptor for the Custom code recipe test
{
    // Meta data for display purposes
    "meta": {
        // label: name of the recipe as displayed, should be short
        "label": "Create image annotations dataset",
        // description: longer string to help end users understand what this recipe does
        "description": "Recipe that creates a Dataset compatible with object detection in DSS, from a folder containing images and annotations of common formats (Coco, Pascal VOC).",
        // icon: must be one of the FontAwesome 3.2.1 icons, complete list here at https://fontawesome.com/v3.2.1/icons/
        "icon": "icon-exchange"
    },
    "kind": "PYTHON",
    "selectableFromFolder": "input_folder",
    // Inputs and outputs are defined by roles. In the recipe's I/O tab, the user can associate one
    // or more dataset to each input and output role.
    // The "arity" field indicates whether the user can associate several datasets to the role ('NARY')
    // or at most one ('UNARY'). The "required" field indicates whether the user is allowed to
    // associate no dataset with the role.
    "inputRoles": [
        {
            "name": "input_folder",
            "label": "Input Folder",
            "description": "Folder containing the different images and annotations.",
            "arity": "UNARY",
            "required": true,
            "acceptsDataset": false,
            "acceptsManagedFolder": true
        }
    ],
    "outputRoles": [
        {
            "name": "output_dataset",
            "label": "Output Dataset",
            "description": "Dataset where each row represent an image from the input folder.",
            "arity": "UNARY",
            "required": false,
            "acceptsDataset": true,
            "acceptsManagedFolder": false
        }
    ],
    // The field "params" holds a list of all the params
    //   for which the user will be prompted for values in the Settings tab of the recipe.
    //
    //   The available parameter types include:
    //   STRING, STRINGS, INT, DOUBLE, BOOLEAN, SELECT, MULTISELECT, MAP, TEXTAREA, PRESET, COLUMN, COLUMNS
    //
    //   For the full list and for more details, see the documentation: https://doc.dataiku.com/dss/latest/plugins/reference/params.html

    "params": [
        {
            "name": "input_data_format",
            "label": "Input data format",
            "type": "SELECT",
            "selectChoices": [{ "value": "coco", "label": "COCO format"},
                              { "value": "voc", "label": "Pascal VOC"}
            ],
            "defaultValue" : "coco", // todo here prefill with smarter choice once we add format guesser
            "description": "Format of your input's data",
            "mandatory": true
        },
        //todo implem a map where we can add multiple key/values instead of always two values ?
        {
            "name": "images_folder_path",
            "label": "Images folder",
            "type": "STRING",
            //"defaultValue" : "", todo here prefill with smarter choice once we add format guesser
            "description": "Relative path of the folder containing the images (from managed folder root)",
            "mandatory": true
        },
        {
            "name": "coco_json_filepath",
            "visibilityCondition" : "model.input_data_format == 'coco'",
            "label": "Annotations file path",
            "type": "STRING",
            //"defaultValue" : "", todo here prefill with smarter choice once we add format guesser
            "description": "Relative path of the annotations JSON file (from managed folder root)",
            "mandatory": true
        },
        {
            "name": "annotations_folder_path",
            "visibilityCondition" : "model.input_data_format == 'voc'",
            "label": "Annotations folder",
            "type": "STRING",
            //"defaultValue" : "", todo here prefill with smarter choice once we add format guesser
            "description": "Relative path of the folder containing the annotations files (from managed folder root)",
            "mandatory": true
        }
        // The 'COLUMNS' type works in the same way, except that it is a list of strings.
    ],
    // The field "resourceKeys" holds a list of keys that allows to limit the number
    // of concurrent executions and activities triggered by this recipe.
    //
    // Administrators can configure the limit per resource key in the Administration > Settings > Flow build
    // screen.
    "resourceKeys": []
}